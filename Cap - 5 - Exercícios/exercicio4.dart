// Desenvolva um analisador de texto que conta palavras, caracteres e gera estat√≠sticas usando String.

// Requisitos:

// Contar palavras, caracteres, linhas
// Palavra mais frequente
// Texto em mai√∫scula e min√∫scula

void main() {
  String texto = '''
Dart √© uma linguagem de programa√ß√£o moderna e poderosa.
Ela foi criada pelo Google para desenvolvimento de aplica√ß√µes.
Com Dart, voc√™ pode criar apps mobile, web e desktop.
A linguagem √© f√°cil de aprender e muito vers√°til.
Dart possui recursos como null-safety e hot reload.

Exemplo de palindromo para saida: ovo.
''';
  
  print('=== PROCESSADOR DE TEXTO ===\n');
  
  print('üìÑ TEXTO ORIGINAL:');
  print('"$texto"');
  
  // Estat√≠sticas b√°sicas
  int totalCaracteres = texto.length;
  int caracteresComEspaco = texto.length;
  int caracteresSemEspaco = texto.replaceAll(' ', '').replaceAll('\n', '').length;
  
  // Contando linhas
  List<String> linhas = texto.trim().split('\n');
  int totalLinhas = linhas.where((linha) => linha.trim().isNotEmpty).length;
  
  // Contando palavras
  String textoLimpo = texto.replaceAll('\n', ' ').trim();
  List<String> palavras = textoLimpo.split(RegExp(r'\s+'));
  palavras = palavras.where((palavra) => palavra.isNotEmpty).toList();
  int totalPalavras = palavras.length;
  
  print('\nüìä ESTAT√çSTICAS B√ÅSICAS:');
  print('Caracteres (com espa√ßos): $caracteresComEspaco');
  print('Caracteres (sem espa√ßos): $caracteresSemEspaco');
  print('Linhas: $totalLinhas');
  print('Palavras: $totalPalavras');
  print('M√©dia de palavras por linha: ${(totalPalavras / totalLinhas).toStringAsFixed(1)}');
  
  // An√°lise de palavras
  print('\nüìù AN√ÅLISE DE PALAVRAS:');
  
  // Contagem de frequ√™ncia
  Map<String, int> frequenciaPalavras = {};
  
  for (String palavra in palavras) {
    // Limpando pontua√ß√£o e convertendo para min√∫scula
    String palavraLimpa = palavra.toLowerCase().replaceAll(RegExp(r'[.,!?;:]'), '');
    if (palavraLimpa.isNotEmpty) {
      frequenciaPalavras[palavraLimpa] = (frequenciaPalavras[palavraLimpa] ?? 0) + 1;
    }
  }
  
  // Palavra mais frequente
  String palavraMaisFrequente = '';
  int maiorFrequencia = 0;
  
  frequenciaPalavras.forEach((palavra, freq) {
    if (freq > maiorFrequencia) {
      maiorFrequencia = freq;
      palavraMaisFrequente = palavra;
    }
  });
  
  print('Palavra mais frequente: "$palavraMaisFrequente" ($maiorFrequencia vezes)');
  
  // Palavras √∫nicas
  print('Palavras √∫nicas: ${frequenciaPalavras.length}');
  
  // Top 5 palavras mais frequentes
  List<MapEntry<String, int>> palavrasOrdenadas = frequenciaPalavras.entries.toList();
  palavrasOrdenadas.sort((a, b) => b.value.compareTo(a.value));
  
  print('\nüèÜ TOP 5 PALAVRAS MAIS FREQUENTES:');
  for (int i = 0; i < 5 && i < palavrasOrdenadas.length; i++) {
    MapEntry<String, int> entry = palavrasOrdenadas[i];
    print('${i + 1}. "${entry.key}": ${entry.value} vezes');
  }
  
  // An√°lise de comprimento de palavras
  List<int> comprimentos = palavras.map((palavra) {
    return palavra.replaceAll(RegExp(r'[.,!?;:]'), '').length;
  }).toList();
  
  int somaComprimentos = 0;
  for (int comp in comprimentos) {
    somaComprimentos += comp;
  }
  double mediaComprimento = somaComprimentos / comprimentos.length;
  
  comprimentos.sort();
  int menorPalavra = comprimentos.first;
  int maiorPalavra = comprimentos.last;
  
  print('\nüìè AN√ÅLISE DE COMPRIMENTO:');
  print('Comprimento m√©dio das palavras: ${mediaComprimento.toStringAsFixed(1)} caracteres');
  print('Palavra mais curta: $menorPalavra caracteres');
  print('Palavra mais longa: $maiorPalavra caracteres');
  
  // Transforma√ß√µes do texto
  print('\nüîÑ TRANSFORMA√á√ïES:');
  print('MAI√öSCULAS: ${textoLimpo.toUpperCase()}');
  print('min√∫sculas: ${textoLimpo.toLowerCase()}');
  
  // Texto sem vogais (exemplo de manipula√ß√£o)
  String textoSemVogais = textoLimpo.replaceAll(RegExp(r'[aeiouAEIOU]'), '*');
  print('Substituindo vogais por *: $textoSemVogais');
  
  // Contando vogais e consoantes
  int vogais = 0;
  int consoantes = 0;
  
  for (int i = 0; i < texto.length; i++) {
    String char = texto[i].toLowerCase();
    if (RegExp(r'[aeiou]').hasMatch(char)) {
      vogais++;
    } else if (RegExp(r'[bcdfghjklmnpqrstvwxyz]').hasMatch(char)) {
      consoantes++;
    }
  }
  
  print('\nüî§ CONTAGEM DE LETRAS:');
  print('Vogais: $vogais');
  print('Consoantes: $consoantes');
  print('Outros caracteres: ${totalCaracteres - vogais - consoantes}');
  
  // Pal√≠ndromo (palavra que l√™ igual de tr√°s para frente)
  print('\nüîÑ TESTE DE PAL√çNDROMOS (palavras com 3+ letras):');
  for (String palavra in frequenciaPalavras.keys) {
    if (palavra.length >= 3) {
      String palavraInversa = palavra.split('').reversed.join('');
      if (palavra == palavraInversa) {
        print('Pal√≠ndromo encontrado: "$palavra"');
      }
    }
  }
}
